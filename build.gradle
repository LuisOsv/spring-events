buildscript {
	ext {
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
		// maven { url "http://repo.spring.io/snapshot" }
		// maven { url "http://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('com.github.ben-manes:gradle-versions-plugin:0.17.0')
	}
}

plugins {
	id 'io.spring.dependency-management' version '1.0.4.RELEASE'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.github.ben-manes.versions' // gradle dependencyUpdates

jar {
	baseName = 'spring-events'
	version = '1.0.0-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.assertJVersion         = '3.9.1'
ext.h2Version              = '1.4.196'
ext.hibernateVersion       = '5.2.14.Final'
ext.jacksonVersion         = '2.9.4'
ext.jacksonDateTimeVersion = jacksonVersion
ext.jsonpathVersion        = '2.4.0'
ext.junitJupiterVersion    = '5.2.0'
ext.junitPlatformVersion   = '1.2.0'
ext.lombokVersion          = '1.16.20'
ext.springBootVersion      = '2.0.1.RELEASE'
ext.testNGVersion          = '6.14.3'

// Special syntax for overriding spring-boot-dependencies
// https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/1.5.6.RELEASE/spring-boot-dependencies-1.5.6.RELEASE.pom
ext['hibernate.version']       = hibernateVersion
ext['jackson.version']         = jacksonVersion
ext['spring-security.version'] = '5.0.4.RELEASE'
ext['spring.version']          = '5.0.5.RELEASE'

repositories {
	mavenCentral()
	// maven { url "http://repo.spring.io/snapshot" }
	// maven { url "http://repo.spring.io/milestone" }
	jcenter() // for TestNG 6.9.11+
}

dependencies {
	compileOnly("org.projectlombok:lombok:${lombokVersion}")

	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.springframework.boot:spring-boot-starter-security")
	compile("org.springframework.boot:spring-boot-starter-web")

	runtime("org.springframework.boot:spring-boot-starter-actuator")
	runtime("org.springframework.boot:spring-boot-starter-thymeleaf")
	runtime("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDateTimeVersion}")
	runtime("com.h2database:h2:${h2Version}")

	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile("org.springframework.security:spring-security-test")
	testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
	testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")
	testCompile("com.jayway.jsonpath:json-path:${jsonpathVersion}")
	testCompile("org.assertj:assertj-core:${assertJVersion}")
	testCompile("org.testng:testng:${testNGVersion}")

	testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
}

task testNG(type: Test) {
	description = 'Runs TestNG tests.'
	useTestNG()
	scanForTestClasses = false
	include '**/*TestNgTests.class'
	// Show STD_OUT & STD_ERR of the test JVM(s) on the console:
	// testLogging.showStandardStreams = true
	// forkEvery 1
}

test {
	description = 'Runs JUnit Platform tests.'
	dependsOn testNG
	useJUnitPlatform()

	testLogging {
		// events "passed", "skipped", "failed", "standardOut", "standardError"
		events "passed", "skipped", "failed"
	}

	scanForTestClasses = false
	include '**/*Tests.class'
	exclude '**/*TestNg*.*'
	// Since we set scanForTestClasses to false, we need to filter out inner
	// classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
	// run MyTests by itself will fail if MyTests contains any inner classes.
	exclude(["**/Abstract*.class", '**/*$*'])
}

task aggregateTestReports(type: TestReport) {
	description = 'Aggregates JUnit and TestNG test reports.'
	destinationDir = test.reports.html.destination
	reportOn test, testNG
}

check.dependsOn aggregateTestReports

task wrapper(type: Wrapper) {
	gradleVersion = '4.7'
}
